{"version":3,"sources":["utils/constants.js","apis/config.js","apis/auth.js","pages/other/FormRegister.js","pages/other/Register.js"],"names":["ACCESS_TOKEN","REFRESH_TOKEN","baseURL","headers","loginAPI","data","URL","axios","post","then","response","result","registerAPI","apiKey","extractAddress","place","address","zip","plain","this","Array","isArray","address_components","forEach","component","types","value","long_name","includes","RegisterSchema","Yup","shape","name","required","lastName","city","postalCode","email","password","repeatPassword","registerUser","values","a","console","log","status","Swal","mixin","toast","position","showConfirmButton","timer","fire","icon","title","message","accessToken","refreshToken","localStorage","setItem","Register","searchInput","useRef","useState","setAddress","initMapScript","window","google","Promise","resolve","src","script","document","createElement","Object","assign","type","async","addEventListener","head","appendChild","loadAsyncScript","initAutocomplete","current","autocomplete","maps","places","Autocomplete","setFields","addListener","getPlace","onChangeAddress","useEffect","initialValues","validationSchema","onSubmit","errors","touched","className","msg","ref","placeholder","for","htmlType","location","content","LayoutOne","headerTop","Breadcrumb","FormRegister"],"mappings":"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","file":"static/js/23.7afe32a3.chunk.js","sourcesContent":["export const ACCESS_TOKEN = \"accessToken\"\nexport const REFRESH_TOKEN = \"refreshToken\"","//export const baseURL = 'http://localhost:3977/api';\nexport const baseURL = 'https://app-maximaderas.herokuapp.com/api';\nexport const headers = {\"mode\":\"no-cors\", \"headers\": {\"Access-Control-Allow-Origin\":\"*\"}}\n","import { baseURL, headers } from \"./config\";\nimport axios from \"axios\";\n\n// LOGIN API\nexport function loginAPI (data) {\n    const URL = `${baseURL}/login-user`;\n    return axios.post(URL, {data}, headers)\n    .then((response) => {\n        // console.log(response)\n        return response\n    })\n    .then((result) => {\n        // console.log(result)\n        return result\n    });\n}\n\n\n// REGISTER API\nexport function registerAPI (data) {\n    const URL = `${baseURL}/save-user`;\n    return axios.post(URL, {data}, headers)\n    .then((response) => {\n        // console.log(response)\n        return response\n    })\n    .then((result) => {\n        // console.log(result)\n        return result\n    });\n}","import React, { useEffect, useRef, useState } from \"react\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from \"yup\";\nimport '../../styles/login.css';\nimport {ACCESS_TOKEN, REFRESH_TOKEN} from '../../utils/constants';\nimport { registerAPI } from \"../../apis/auth\";\nimport Swal from 'sweetalert2';\n\n\nconst apiKey = 'AIzaSyDQGqbZH1EYcj2rvCtVzF9pvTGfGueNWDg';\nconst mapApiJs = 'https://maps.googleapis.com/maps/api/js';\nconst geocodeJson = 'https://maps.googleapis.com/maps/api/geocode/json';\n\n\n// load google map api js\n\nfunction loadAsyncScript(src) {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\");\n      Object.assign(script, {\n        type: \"text/javascript\",\n        async: true,\n        src\n      })\n      script.addEventListener(\"load\", () => resolve(script));\n      document.head.appendChild(script);\n    })\n  }\n  \n  const extractAddress = (place) => {\n  \n    const address = {\n      zip: \"\",\n      plain() {\n        const zip = this.zip ? this.zip + \", \" : \"\";\n        return zip;\n      }\n    }\n  \n    if (!Array.isArray(place?.address_components)) {\n      return address;\n    }\n  \n    place.address_components.forEach(component => {\n      const types = component.types;\n      const value = component.long_name;\n\n      if (types.includes(\"postal_code\")) {\n        address.zip = value;\n      }\n  \n    });\n  \n    return address;\n  }\n\n\nconst RegisterSchema = Yup.object().shape({\n    name: Yup.string().required(\"Nombre Requerido\"),\n    lastName: Yup.string().required(\"Apellido Requerido\"),\n    city: Yup.string().required(\"Ciudad Requerida\"),\n    postalCode: Yup.string().required(\"Código Postal Requerido\"),\n    email: Yup.string().email(\"Email inválido\").required(\"Email Requerido\"),\n    password: Yup.string().required(\"Contraseña Requerida\"),\n    repeatPassword: Yup.string().required(\"Confirmar Contraseña Requerida\")\n});\n\nconst registerUser = async(values) =>{\n    // console.log(values);\n    // return true;\n    const result = await registerAPI(values)\n    console.log(result)\n\n    if(result.data.status === 202) {\n        const Toast = Swal.mixin({\n            toast: true,\n            position: 'top-end',\n            showConfirmButton: false,\n            timer: 3000,\n        });\n\n        Toast.fire({\n            icon: 'error',\n            title: 'El correo no existe'\n        });\n\n    } else if (result.data.status === 404) {\n        const Toast = Swal.mixin({\n            toast: true,\n            position: 'top-end',\n            showConfirmButton: false,\n            timer: 3000,\n        });\n\n        Toast.fire({\n            icon: 'error',\n            title: 'Contraseña incorrecta'\n        });\n    }\n\n    if(result.message) {\n        console.log('error')\n    } else {\n        const {accessToken, refreshToken} = result.data;\n        localStorage.setItem(ACCESS_TOKEN, accessToken)\n        localStorage.setItem(REFRESH_TOKEN, refreshToken)\n    }\n}\n\n\n\nconst Register = () => {\n\n    const searchInput = useRef(null);\n    const [address, setAddress] = useState({});\n  \n    // init gmap script\n    const initMapScript = () => {\n      // if script already loaded\n      if(window.google) {\n        return Promise.resolve();\n      }\n      const src = `${mapApiJs}?key=${apiKey}&libraries=places&v=weekly`;\n      return loadAsyncScript(src);\n    }\n  \n    // do something on address change\n    const onChangeAddress = (autocomplete) => {\n      const place = autocomplete.getPlace();\n      setAddress(extractAddress(place));\n    }\n  \n    // init autocomplete\n    const initAutocomplete = () => {\n      if (!searchInput.current) return;\n  \n      const autocomplete = new window.google.maps.places.Autocomplete(searchInput.current);\n      autocomplete.setFields([\"address_component\", \"geometry\"]);\n      autocomplete.addListener(\"place_changed\", () => onChangeAddress(autocomplete));\n  \n    }\n  \n    const reverseGeocode = ({ latitude: lat, longitude: lng}) => {\n      const url = `${geocodeJson}?key=${apiKey}&latlng=${lat},${lng}`;\n      searchInput.current.value = \"Getting your location...\";\n      fetch(url)\n          .then(response => response.json())\n          .then(location => {\n            const place = location.results[0];\n            const _address = extractAddress(place);\n            setAddress(_address);\n            searchInput.current.value = _address.plain();\n          })\n    }\n  \n    const findMyLocation = () => {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(position => {\n          reverseGeocode(position.coords)\n        })\n      }\n    }\n  \n  \n    // load map script after mounted\n    useEffect(() => {\n      initMapScript().then(() => initAutocomplete())\n    }, []);\n    \n\n    return(\n        <div>\n        <Formik\n            initialValues={{\n                name: \"\",\n                lastName: \"\",\n                city: \"\",\n                postalCode: \"\",\n                email: \"\", \n                password: \"\",\n                repeatPassword: \"\",\n                status: \"active\" \n            }}\n            validationSchema={RegisterSchema}\n            onSubmit={(values) => {\n                console.log(values);\n                registerUser(values)\n            }}\n        >\n        {({ values, errors, touched }) => (\n            <div className=\"container\">\n                <h2 className=\"text-center p-2 font-weight-bold\">REGÍSTRATE</h2>\n                <div className=\"container-form\">\n\n                    <Form className=\"form\">\n\n                        <div className=\"row row-input\">\n                            <label className=\"text\">Nombre:</label>\n                            <Field \n                                name=\"name\" \n                                type=\"text\" \n                                className=\"input\"\n                            />\n                            <ErrorMessage name=\"firstName\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <div className=\"row row-input\">\n                            <label className=\"text\">Apellido:</label>\n                            <Field \n                                name=\"lastName\" \n                                type=\"text\" \n                                className=\"input\" \n                            />\n                            <ErrorMessage name=\"lastName\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n                    \n                        <div className=\"row row-input\">\n                            <label className=\"text\">Ciudad:</label>\n                            <Field \n                                ref={searchInput} \n                                name=\"city\" \n                                type=\"text\" \n                                className=\"input\" \n                                placeholder=\"Busca tu ubicación...\"\n                            />\n                            <ErrorMessage name=\"city\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <div className=\"row row-input\">\n                            <label className=\"text\">Código Postal:</label>\n                            <Field\n                                name=\"postalCode\" \n                                type=\"text\" \n                                className=\"input\" \n                            />\n                            <ErrorMessage name=\"postalCode\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <div className=\"row row-input\">\n                            <label className=\"text\">Email:</label>\n                            <Field \n                                name=\"email\" \n                                type=\"email\" \n                                className=\"input\" \n                            />\n                            <ErrorMessage name=\"email\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <div className=\"row row-input\">\n                            <label className=\"text-contraseña\">Contraseña:</label>\n                            <Field \n                                name=\"password\" \n                                type=\"password\" \n                                className=\"input\"\n                            />\n                            <ErrorMessage name=\"password\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <div className=\"row row-input\">\n                            <label className=\"text-contraseña\">Confirmar Contraseña:</label>\n                            <Field \n                                name=\"repeatPassword\" \n                                type=\"password\" \n                                className=\"input\" \n                            />\n                            <ErrorMessage name=\"repeatPassword\">\n                                {(msg) => <span className=\"error\">{msg}</span>}\n                            </ErrorMessage>\n                        </div>\n\n                        <Field \n                            name=\"status\" \n                            type=\"hidden\" \n                            className=\"input\" \n                        />\n\n                        <div className=\"col text-center\">\n                            <input \n                                type=\"checkbox\" \n                                name=\"status\" \n                                className=\"input\" \n                                // onChange={ inputValidation } \n                                // checked={ inputs.privacyPolicy } \n                            />\n                            <span for=\"defaultUnchecked\"> He leído y acepto los Terminos y condiciones y aviso de privacidad.</span>\n                        </div>\n\n                        <br></br>\n\n                        <div className=\"col text-center\">\n                            <button htmlType=\"submit\" type=\"submit\" className=\"btn\" >Regístrate</button>\n                        </div>\n\n                    </Form>\n\n                </div>\n            </div>\n        )}\n        </Formik>\n    </div>\n    );\n};\n\nexport default Register;","import PropTypes from \"prop-types\";\nimport React, { Fragment } from \"react\";\nimport MetaTags from \"react-meta-tags\";\nimport { Link } from \"react-router-dom\";\n// import { BreadcrumbsItem } from \"react-breadcrumbs-dynamic\";\nimport Tab from \"react-bootstrap/Tab\";\nimport Nav from \"react-bootstrap/Nav\";\nimport LayoutOne from \"../../layouts/LayoutOne\";\nimport Breadcrumb from \"../../wrappers/breadcrumb/Breadcrumb\";\nimport FormRegister from \"./FormRegister\";\n\nconst Register = ({ location }) => {\n  // const { pathname } = location;\n\n  return (\n    <Fragment>\n      <MetaTags>\n        <title>Maximaderas | Registro</title>\n        <meta\n          name=\"description\"\n          content=\"Compare page of flone react minimalist eCommerce template.\"\n        />\n      </MetaTags>\n      {/* <BreadcrumbsItem to={process.env.PUBLIC_URL + \"/\"}>Inicio</BreadcrumbsItem>\n      <BreadcrumbsItem to={process.env.PUBLIC_URL + pathname}>\n        Login Register\n      </BreadcrumbsItem> */}\n      <LayoutOne headerTop=\"visible\">\n        {/* breadcrumb */}\n        <Breadcrumb />\n        <div className=\"login-register-area pt-100 pb-100\">\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-lg-7 col-md-12 ml-auto mr-auto\">\n                <div className=\"login-register-wrapper\">\n                  <div className=\"login-form-container\">\n                    <div className=\"login-register-form\">\n                      <FormRegister/>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </LayoutOne>\n    </Fragment>\n  );\n};\n\nRegister.propTypes = {\n  location: PropTypes.object\n};\n\nexport default Register;\n"],"sourceRoot":""}